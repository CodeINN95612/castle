// <auto-generated />
using System;
using Castle.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Castle.Infrastructure.Migrations
{
    [DbContext(typeof(CastleDbContext))]
    [Migration("20240312010119_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Castle.Domain.Entities.Candidate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Identification")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(true)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Candidates", (string)null);
                });

            modelBuilder.Entity("Castle.Domain.Entities.Election", b =>
                {
                    b.Property<Guid>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("IdWinnerResult")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("RoundCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("IdWinnerResult")
                        .IsUnique();

                    b.ToTable("Elections", (string)null);
                });

            modelBuilder.Entity("Castle.Domain.Entities.ElectionEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IdCandidate")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdElection")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdLocation")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdParty")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdRole")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("IdCandidate");

                    b.HasIndex("IdElection");

                    b.HasIndex("IdLocation");

                    b.HasIndex("IdParty");

                    b.HasIndex("IdRole");

                    b.ToTable("ElectionEntries", (string)null);
                });

            modelBuilder.Entity("Castle.Domain.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(true)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Locations", (string)null);
                });

            modelBuilder.Entity("Castle.Domain.Entities.Party", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Initials")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(true)
                        .HasColumnType("character varying(8)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Initials")
                        .IsUnique();

                    b.ToTable("Parties", (string)null);
                });

            modelBuilder.Entity("Castle.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Castle.Domain.Entities.Round", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IdElection")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("VoteDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("IdElection");

                    b.ToTable("Rounds", (string)null);
                });

            modelBuilder.Entity("Castle.Domain.Entities.RoundResult", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IdElectionEntry")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdRound")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Votes")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdElectionEntry");

                    b.HasIndex("IdRound");

                    b.ToTable("RoundResults", (string)null);
                });

            modelBuilder.Entity("Castle.Domain.Entities.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ElectionEntryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdElectionEntry")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdRound")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("IdentificationVoter")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("RoundId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ElectionEntryId");

                    b.HasIndex("IdElectionEntry");

                    b.HasIndex("IdRound");

                    b.HasIndex("IdentificationVoter");

                    b.HasIndex("RoundId");

                    b.ToTable("Votes", (string)null);
                });

            modelBuilder.Entity("Castle.Domain.Entities.Voter", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasMaxLength(32)
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("DateOfBirthBytes")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("bytea");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("SignCodebytes")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("bytea");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Voters", (string)null);
                });

            modelBuilder.Entity("Castle.Domain.Entities.Election", b =>
                {
                    b.HasOne("Castle.Domain.Entities.RoundResult", "WinnerResult")
                        .WithOne("WonElection")
                        .HasForeignKey("Castle.Domain.Entities.Election", "IdWinnerResult");

                    b.Navigation("WinnerResult");
                });

            modelBuilder.Entity("Castle.Domain.Entities.ElectionEntry", b =>
                {
                    b.HasOne("Castle.Domain.Entities.Candidate", "Candidate")
                        .WithMany("ElectionEntries")
                        .HasForeignKey("IdCandidate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Castle.Domain.Entities.Election", "Election")
                        .WithMany("ElectionEntries")
                        .HasForeignKey("IdElection")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Castle.Domain.Entities.Location", "Location")
                        .WithMany("ElectionEntries")
                        .HasForeignKey("IdLocation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Castle.Domain.Entities.Party", "Party")
                        .WithMany("ElectionEntries")
                        .HasForeignKey("IdParty")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Castle.Domain.Entities.Role", "Role")
                        .WithMany("ElectionEntries")
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Election");

                    b.Navigation("Location");

                    b.Navigation("Party");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Castle.Domain.Entities.Round", b =>
                {
                    b.HasOne("Castle.Domain.Entities.Election", "Election")
                        .WithMany("Rounds")
                        .HasForeignKey("IdElection")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Election");
                });

            modelBuilder.Entity("Castle.Domain.Entities.RoundResult", b =>
                {
                    b.HasOne("Castle.Domain.Entities.ElectionEntry", "ElectionEntry")
                        .WithMany("RoundResults")
                        .HasForeignKey("IdElectionEntry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Castle.Domain.Entities.Round", "Round")
                        .WithMany("RoundResults")
                        .HasForeignKey("IdRound")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ElectionEntry");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("Castle.Domain.Entities.Vote", b =>
                {
                    b.HasOne("Castle.Domain.Entities.ElectionEntry", null)
                        .WithMany("Votes")
                        .HasForeignKey("ElectionEntryId");

                    b.HasOne("Castle.Domain.Entities.ElectionEntry", "ElectionEntry")
                        .WithMany()
                        .HasForeignKey("IdElectionEntry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Castle.Domain.Entities.Round", "Round")
                        .WithMany()
                        .HasForeignKey("IdRound")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Castle.Domain.Entities.Voter", "Voter")
                        .WithMany("Votes")
                        .HasForeignKey("IdentificationVoter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Castle.Domain.Entities.Round", null)
                        .WithMany("Votes")
                        .HasForeignKey("RoundId");

                    b.Navigation("ElectionEntry");

                    b.Navigation("Round");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("Castle.Domain.Entities.Candidate", b =>
                {
                    b.Navigation("ElectionEntries");
                });

            modelBuilder.Entity("Castle.Domain.Entities.Election", b =>
                {
                    b.Navigation("ElectionEntries");

                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("Castle.Domain.Entities.ElectionEntry", b =>
                {
                    b.Navigation("RoundResults");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Castle.Domain.Entities.Location", b =>
                {
                    b.Navigation("ElectionEntries");
                });

            modelBuilder.Entity("Castle.Domain.Entities.Party", b =>
                {
                    b.Navigation("ElectionEntries");
                });

            modelBuilder.Entity("Castle.Domain.Entities.Role", b =>
                {
                    b.Navigation("ElectionEntries");
                });

            modelBuilder.Entity("Castle.Domain.Entities.Round", b =>
                {
                    b.Navigation("RoundResults");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Castle.Domain.Entities.RoundResult", b =>
                {
                    b.Navigation("WonElection");
                });

            modelBuilder.Entity("Castle.Domain.Entities.Voter", b =>
                {
                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
